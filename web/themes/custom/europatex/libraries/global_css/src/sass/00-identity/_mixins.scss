@use "sass:math";

// Custom sass mixins
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

@mixin switch-color-scheme(
  $property,
  $light-scheme-color: $body-font-color,
  $dark-scheme-color: $dark-body-font-color
) {
  #{$property}: $light-scheme-color;

  @media (prefers-color-scheme: dark) {
    #{$property}: $dark-scheme-color;
  }
}

@mixin dark-color-scheme(
  $property,
  $dark-scheme-color: $dark-body-font-color
) {
  @media (prefers-color-scheme: dark) {
    #{$property}: $dark-scheme-color;
  }
}

////////////////////////////
// LINK STYLE
////////////////////////////

@mixin theme-link(
  $inactive-color: $body-font-color,
  $active-color: $link-color,
  $hover-decoration: none
) {
  color: $inactive-color;
  &:visited {
    color: $inactive-color;
  }
  &:hover,
  &:active,
  &:focus {
    color: $active-color;
    text-decoration: $hover-decoration;
  }
}

////////////////////////////
// BUTTONS
////////////////////////////
@mixin button($type: primary) {
  transition: all 0.15s ease-in-out;
  display: inline-block;
  position: relative;
  z-index: 2;
  text-decoration: none;
  text-transform: uppercase;
  appearance: none;
  font-size: 1rem;
  letter-spacing: $letter-spacing;
  text-align: center;

  @if ($type==primary) {
    @include switch-color-scheme(background-color, $button-color, $button-darkmode-color);
    @include switch-color-scheme(color, #fff, $text-color);

    font-weight: bold;
    overflow: hidden;
    position: relative;
    padding: $gutter*0.325 $gutter;
    border-radius: $ui-border-radius;

    .external-link-icon {
      top: 0.05em;
      transition: all 1s ease-in-out;
      text-decoration: $link-text-decoration;
      background-color: transparent;

      &::before {
        @include switch-color-scheme(color, #fff, $text-color);
      }
    }

    &:hover,
    &:focus {
      @include switch-color-scheme(background-color, $button-hover-color, $button-darkmode-hover-color);
      @include switch-color-scheme(color, #fff, $text-color);
    }
  }

  @if ($type==secondary) {
    @include switch-color-scheme(border-color, $button-color, $button-darkmode-color);
    @include switch-color-scheme(color, $button-color, $button-darkmode-color);

    font-weight: bold;
    outline: 0;
    border: 0;
    padding: 0;
    position: relative;
    background-color: $secondary-color;
    padding: $gutter*0.325 $gutter;
    border-width: 2px;
    border-style: solid;
    border-radius: $ui-border-radius;
  }

  @if ($type==tertiary) {
    color: $primary-color;
    background: none;
    padding: 0;
    box-shadow: none;
    border-bottom: 1px solid transparent;

    &:hover,
    &:focus {
      margin: 0;
      background: none;
      box-shadow: none;
      border-bottom: 1px solid $secondary-color;
    }
  }

  @if ($type==error) {
    border: 4px solid $error-color;
    padding: $input-padding;
    background: white;

    &:hover {
      color: white;
    }
  }
}

@mixin hover-underline($height: 5px, $lightmode-color: $link-color, $darkmode-color: #fff) {
  position: relative;

  &::after {
    @include switch-color-scheme(background-color, $lightmode-color, $darkmode-color);

    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    height: $height;
    border-radius: 1px;
    width: 0;
    transition: width 0.3s ease-in-out;
  }

  &:hover,
  &:focus-visible,
  &[aria-expanded="true"] {
    &::after {
      width: 100%;
    }
  }
}

//////////////////////////////////////
// MISC MIXINS
//////////////////////////////////////

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin visually-hidden {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  margin: 0 !important;
  padding: 0 !important;
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the visually-hidden effect.
@mixin visually-hidden-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include visually-hidden;

  &:active,
  &:focus {
    @include visually-hidden-off;
  }
}

// The word "Unpublished" displayed underneath unpublished nodes and comments.
@mixin unpublished-div {
  height: 0;
  overflow: visible;
  color: #d8d8d8;
  font-size: 75px;
  line-height: 1;
  font-weight: bold;
  text-transform: uppercase;
  text-align: center;
  word-wrap: break-word; // A very nice CSS3 property
}

$message-colors: (
  Status: $status-color,
  Error: $error-color,
  Success: $success-color,
  Warning: $warning-color,
  Alert: $alert-color,
);

@mixin message {
  @each $name, $value in $message-colors {
    &.#{$name} {
      background-color: lighten($value, 40%);
      color: $black;
      border: 1px solid $value;
    }
  }
}

////////////////////////////
// LAYOUT
////////////////////////////

@mixin debug-layout {
  * {
    outline: 2px dotted red;
  }
  * * {
    outline: 2px dotted green;
  }
  * * * {
    outline: 2px dotted orange;
  }
  * * * * {
    outline: 2px dotted blue;
  }
  * * * * * {
    outline: 1px solid red;
  }
  * * * * * * {
    outline: 1px solid green;
  }
  * * * * * * * {
    outline: 1px solid orange;
  }
  * * * * * * * * {
    outline: 1px solid blue;
  }
}

@mixin legacy-clearfix {
  overflow: hidden;
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

////////////////////////////
// TEXT OVERFLOW
////////////////////////////

@mixin text-overflow($method: ellipsis) {
  white-space: nowrap;
  overflow: hidden;
  -o-text-overflow: $method;
  text-overflow: $method;
  .ie & {
    width: 100%;
  }
}

////////////////////////////
// UNORDERED LISTS
////////////////////////////

@mixin no-bullets {
  li {
    list-style-type: none;
    list-style-image: none;
  }
}

@mixin clean-list {
  @include no-bullets;
  margin-left: 0;
  padding-left: 0;
}

@mixin horizontal-list($list-margin: 1em, $list-item-margin: 0.25em) {
  list-style-type: none;
  padding: 0;
  margin: $list-margin;
  overflow: hidden;
  > li {
    display: block;
    float: left;
    margin-right: $list-item-margin;
    &:last-child {
      margin-right: 0px;
    }
  }
}

////////////////////////////
// IMAGE REPLACEMENT
////////////////////////////

// Hide text of an element to replace by background image
// Note: ffect pseudo-elements
@mixin hide-text() {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  background-color: transparent;
}

@mixin hide-text-icon($color: $body-font-color) {
  display: block;
  width: 44px;
  height: 44px;
  text-indent: -9999px;
  overflow: hidden;

  &::before {
    color: $color;
  }
}

// MIMIC AN <hr>
@mixin divider-top {
  margin-top: $vert-gutter;
  padding-top: $vert-gutter;
  border-top: 1px solid $horizontal-rule-border;
}

// MIMIC AN <hr>
@mixin divider-bottom {
  margin-top: $vert-gutter;
  padding-bottom: $vert-gutter;
  border-bottom: 1px solid $horizontal-rule-border;
}

////////////////////////////
// PIXELS TO REM UNITS
////////////////////////////

// Baseline ($baseline-px) measured in pixels. The value should
// be the same as the font-size value for the html element.
// If the html element's font-size is set to 62.5%
// (of the browser's default font-size of 16px),
// then the variable below would be 10px.
// Example:
// .element {
//   @include rem('padding',10px 0 2px 5px);
// }

@mixin rem($property, $px-values, $baseline-px: $base-font-size) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem * 1;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  } @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of($value) != "number" {
        $rem-values: append($rem-values, $value);
      } @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}

////////////////////////////
// TRIANGLES
////////////////////////////

// Used to create equilateral triangles
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

/////////////////////////////
// INPUT PLACEHOLDER
/////////////////////////////

@mixin theme-placeholder($color: #000000, $color-focus: #ffffff) {
  &::-webkit-input-placeholder {
    color: $color;
    &:focus {
      color: $color-focus;
    }
  }

  // Make disappear on focus in iOS... This works in Chrome as opposed to the above focus style
  &:focus::-webkit-input-placeholder {
    color: $color-focus;
  }

  &:-moz-placeholder {
    /* Firefox 18- */
    color: $color;
    &:focus {
      color: $color-focus;
    }
  }

  &::-moz-placeholder {
    /* Firefox 19+ */
    color: $color;
    &:focus {
      color: $color-focus;
    }
  }

  &:-ms-input-placeholder {
    color: $color;
    &:focus {
      color: $color-focus;
    }
  }
}

////////////////////////////
// ICON FONT
////////////////////////////

@mixin icomoon-styling {
  font-family: $icon-font;
  speak: never;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  // Better Font Rendering ===========
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin icomoon($icon, $position: "before") {
  &:#{$position} {
    @include icomoon-styling;

    @extend .icon-#{$icon};
  }
}

////////////////////////////
// RESPONSIVE
////////////////////////////

// Intrinsic Ratio Helper Function
// Used for responsive embed videos, etc...
@mixin intrinsicRatioContainer($width, $height) {
  height: 0;
  position: relative;
  padding-bottom: percentage($height / $width);
}

@mixin intrinsicRatioElement() {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  position: absolute;
}

////////////////////////////
// LAYOUT
////////////////////////////

@mixin layout-container($size: normal) {
  margin-left: auto;
  margin-right: auto;
  max-width: $viewport-max;
  min-width: $viewport-min;

  // Causing sidescroll on homepage carousel and likely Paragraph Banners as well
  // @include breakpoint($xwide-min) {
  //   max-width: $widescreen-min;
  // }

  @if ($size == small) {
    max-width: 960px;

    // @include breakpoint($xwide-min) {
    //   max-width: 960px;
    // }
  }
}

@mixin layout-gutter {
  padding-left: $horiz-gutter*0.75;
  padding-right: $horiz-gutter*0.75;

  @include breakpoint($desktop-min) {
    padding-left: $horiz-gutter;
    padding-right: $horiz-gutter;
  }
}

@mixin grid-container {
  margin-left: -($horiz-gutter*0.5);
  margin-right: -($horiz-gutter*0.5);
}

@mixin grid-item {
  padding-left: ($horiz-gutter*0.5);
  padding-right: ($horiz-gutter*0.5);
}

@mixin break-container {
  margin-left: -$horiz-gutter*0.75;
  margin-right: -$horiz-gutter*0.75;

  @include breakpoint($desktop-min) {
    margin-left: -$horiz-gutter;
    margin-right: -$horiz-gutter;
  }

  @include breakpoint($viewport-max) {
    margin-left: calc(-100vw * 0.5 + 1136px * 0.5);
    margin-right: calc(-100vw * 0.5 + 1136px * 0.5);

    // 66px padding left
    .gin--vertical-toolbar & {
      margin-left: calc(-100vw * 0.5 + 1202px * 0.5);
      margin-right: calc(-100vw * 0.5 + 1202px * 0.5);
    }
  }
}

// Close button
@mixin close-button {
  background-color: transparent;
  text-align: left;
  text-indent: -9999px;
  overflow: hidden;
  padding: 0;
  width: 44px;
  height: 44px;
  position: absolute;
  top: 0;
  right: -$gutter*0.5;

  &::before,
  &::after {
    @include switch-color-scheme(background-color, $dark-gray, #fff);

    content: "";
    width: 24px;
    height: 1px;
    display: block;
    position: relative;
    margin: 0 auto;
  }

  &::before {
    transform: rotate(45deg);
    top: 1px;
  }

  &::after {
    transform: rotate(-45deg);
  }

  span {
    @include visually-hidden;
  }

  &:hover,
  &:focus {
    @include switch-color-scheme(background-color, $button-bgrd, $button-darkmode-bgrd);
  }
}

@mixin address {
  background-color: $xlight-gray;
  padding: ($gutter*0.5);
}
